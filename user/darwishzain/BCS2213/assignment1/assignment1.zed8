─ section assignment1 parents standard_toolkit
└
Each student of the Computer Faculty has a curriculum structure according to their
respective departments. In general, the purpose of the curriculum structure is to visualize the
registration of subjects in each semester. Based on the visualization, students need to register
their respective subjects using the Open registration system.

In the curriculum structure,

subject groups(specified based on codes)
faculty core subjects
departmental required subjects
university required subjects 
elective subjects 

students have the right to determine the number of credits 
what subjects are required during registration for each semester

Based on the curriculum structure and open registration system, you are required to develop a
Z specification model using the Z notation tool. The specification should support these
requirements:
1. The system able to login and logout by the student and academic advisor.
2. The system allows student to register (insert) and withdraw or drop (delete) the subject.
3. The system allows student to update their registration such as change the section or etc.
4. The system should provide and alert notification to the academic advisor for
approve/disapprove
5. This system does not allow students to register for subjects exceeding 20 credits per semester.
6. This system allows academic advising to approve or disapprove subjects registered/withdrawn
by students.
7. The system able to display/print all information of registered subject by student and academic
advisor.
## Course == Code
─ [STUDENT,ADVISOR,COURSE,SECTION,BOOL] └

┌ SystemSchema
Student: ℙ STUDENT
  Advisor:  ℙ ADVISOR
  Course: ℙ COURSE
  Section: COURSE ⇸ ℙ SECTION
  Registered: STUDENT ⇸ (COURSE ↔ SECTION)
  Creditcourse: COURSE ⇸ ℕ
  Credittotal: STUDENT ⇸ ℕ
  Creditmax: ℕ
  Studentlogged : ℙ STUDENT
  Advisorlogged : ℙ ADVISOR
  Advisory: STUDENT ⇸ ADVISOR
  Approved: STUDENT ⇸ (COURSE ⇸ BOOL)
|
	Creditmax = 20
└

┌ InitSystem
 	ΞSystemSchema 	
|
  Student = ∅
  Advisor = ∅
  Course = ∅
  Section = ∅
  Registered = ∅
  Creditcourse = ∅
  Credittotal = ∅ 
   Approved = ∅
└

┌ Studentlogin
  ΔSystemSchema
  student?: STUDENT
|
  student? ∉ Studentlogged
  	Studentlogged′ = Studentlogged ∪ { student? }
└

┌ Studentlogout
  ΔSystemSchema
  student?: STUDENT
|
  student? ∈ Studentlogged
  	Studentlogged′ = Studentlogged ∖ { student? }
└

┌ Advisorlogin
  ΔSystemSchema
  advisor?: ADVISOR
|
  advisor? ∉ Advisorlogged
  	Advisorlogged′ = Advisorlogged ∪ { advisor? }
└

┌ Advisorlogout
  ΔSystemSchema
  advisor?: ADVISOR
|
  advisor? ∈ Advisorlogged
  	Advisorlogged′ = Advisorlogged ∖ { advisor? }
└

┌ CourseRegister
  ΔSystemSchema
  ΞStudentlogin
  studentlogged?: STUDENT
  course? : COURSE
  section?: SECTION
|
	studentlogged? ∈ Studentlogged
		studentlogged? ∈ dom(Registered)
  			course? ∈ Course
  				section? ∈ (Section course?)
  					(course?, section?) ∈ (Registered studentlogged?)
  						Registered' = Registered ⊖ {studentlogged? ↦ {(course?, Section)}}
  						Registered' = Registered' ⊕ {studentlogged? ↦ (Registered studentlogged? ∪ {(course?, section?)})}
└

┌ Coursewithdraw
   ΔSystemSchema
  ΞStudentlogin
  studentlogged?: STUDENT
  course? : COURSE
  section?: SECTION
|
  studentlogged? ∈ Studentlogged
  	course? ∈ Course
  		section? ∈ (Section course?)
  			(course?, section?) ∈ (Registered studentlogged?)
  				Registered' = Registered ⊖ {studentlogged? ↦ {(course?, section?)}}
  				
 └
 
┌ Courseedit
  ΔSystemSchema
  ΞStudentlogin
  studentlogged?: STUDENT
  course? : COURSE
  section?: SECTION
|
  studentlogged? ∈ Studentlogged
  	course? ∈ (studentlogged? ⇸ Course)
  		section? ∈ (studentlogged? Section course?)
  			(course?, section?) ∉ (Registered studentlogged?)
  				(Creditcourse course?) + (Credittotal studentlogged?) ≤ Creditmax
 					Registered' = Registered ⊖ {studentlogged? ↦ {(course?, section?)}}
  					Registered' = Registered' ⊕ {studentlogged? ↦ (Registered studentlogged? ∪ {(course?, section?)})}
  	
└

┌ Advisornotify
   ΔSystemSchema
  ΞAdvisorlogin
  advisorlogged?: ADVISOR
  studentinfo!: STUDENT → COURSE × SECTION × BOOL
|
  advisorlogged? ∈ Advisorlogged
 		 (advisorlogged? × STUDENT → COURSE × SECTION × BOOL) = FALSE
 		 	studentinfo! = advisorlogged? × STUDENT → COURSE × SECTION × BOOL
└

┌Advisorapprove
   ΔSystemSchema
  advisorlogged?: ADVISOR
  student?: STUDENT
  course?: COURSE
|
	advisorlogged? ∈ Advisorlogged
		student? ∈ dom(Approved)
  			course? ∈ Course
  				course? ∈ dom(Approved student?)
  					Approved′ = Approved ⊕ {student? ↦ (Approved student? ⊕ {course? ↦ TRUE})}
└

┌ Studentdisplay
   	ΞSystemSchema
  	ΞStudentlogin
  	studentlogged?: STUDENT
  	course! : COURSE
  	section!: COURSE ⇸ ℙ SECTION
  	approved!: STUDENT ⇸ (COURSE ⇸ BOOL)
|
  studentlogged? ∈ Studentlogged
  	course! = studentlogged? ⇸ Course
  	section! = studentlogged? ⇸ (Course Section)
  	approved! = Studentlogged ⇸ (Course Approved)
└

┌ Advisordisplay
   	ΞSystemSchema
  	ΞAdvisorlogin
  	advisorlogged?:ADVISOR
  	advisory!:STUDENT ⇸ ADVISOR
  	studentinfo!: STUDENT ⇸ COURSE × SECTION × BOOL
|
  advisorlogged? ∈ Advisorlogged
  	studentinfo! = STUDENT → COURSE × SECTION × BOOL
  	
└

